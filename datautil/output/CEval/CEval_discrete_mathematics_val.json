{
    "basic_information": {
        "name": "ceval_discrete_mathematics_val",
        "creator": "ceval",
        "date": "2023/05",
        "info": "ceval, discrete_mathematics, validation set"
    },
    "cases": [
        {
            "input": "下列集合中与$\\mathbf{\\{}1,2\\}$不相等的是:____\nA: $\\{1,2\\}\\cup\\phi$\nB: $\\{1,2\\}$\nC: $\\{1,2,2\\}$\nD: $\\{x|\\ x\\in{\\mathcal{R}}\\land x^{2}-3x+2=0\\}$",
            "expected_answer": "B",
            "info": "case 0"
        },
        {
            "input": "令P：天气很冷，Q：老王来了，则命题“虽然天气很冷，但是老王还是来了”可符号化为____\nA: P∧Q\nB: P→Q\nC: P∧﹁Q\nD: P→﹁Q",
            "expected_answer": "A",
            "info": "case 1"
        },
        {
            "input": "对于集合A上的二元关系R，若$B\\subseteq A$，$C\\subseteq A$，$R\\uparrow\\ B$代表关系R在集合B上受限，则下列是正确的____\nA: $R[B\\cap C]=R[B]\\cap R[C]$\nB: $R[B]-R[C]=R[B-C]$\nC: $B\\subseteq A\\Leftrightarrow R[B]\\subseteq R[A]$\nD: $R\\uparrow(B\\cup C)=R\\uparrow B\\cup R\\uparrow C$",
            "expected_answer": "D",
            "info": "case 2"
        },
        {
            "input": "下列说法错误的是____\nA: 若简单图每个节点的度大于等于$\\frac{n}{2}$,则$G$有$H$回路\nB: 简单图$G$存在$H$回路的充要条件是其闭合图存在$H$回路\nC: 简单图$G$的任意结点$v_i$，$v_j$之间恒有$d(v_{j})+d(v_{j})\\geq n{-}1$， 则$G$存在$H$回路\nD: 简单图的闭合图唯一",
            "expected_answer": "C",
            "info": "case 3"
        },
        {
            "input": "给定n个结点的一个图，它是一个树的下列说法中，____是不对的。\nA: 无回路的连通图\nB: 无回路但若增加一条新边就有回路\nC: 连通且m=n-1， 其中m是边数，n是结点数\nD: 所有结点的度数>2",
            "expected_answer": "D",
            "info": "case 4"
        },
        {
            "input": "六阶群的任何非平凡子群一定不是____\nA: 2阶\nB: 5阶\nC: 3阶\nD: 6阶",
            "expected_answer": "D",
            "info": "case 5"
        },
        {
            "input": "下面说法____是错误的\nA: 不存在既自反又反自反的关系\nB: 存在即对称又反对称的关系\nC: 存在即不对称又不反对称的关系\nD: 由一个有序对构成的二元关系一定是一个传递关系。",
            "expected_answer": "A",
            "info": "case 6"
        },
        {
            "input": "设图G是有6个顶点的连通图，总度数为20，则从G中删去____边后使之变成树。\nA: 10\nB: 5\nC: 3\nD: 2",
            "expected_answer": "B",
            "info": "case 7"
        },
        {
            "input": "设G为平面图，则下面可能不正确的选项是_____\nA: G = (G*)*\nB: G*= ((G*)*)*\nC: (G*)* = (G*)*)*)*\nD: ((G*)*)*= ((((G*)*)*)*)*",
            "expected_answer": "A",
            "info": "case 8"
        },
        {
            "input": "已知一棵树T中有度为5，4，3，2的顶点各一个，其余为树叶顶点，T的树叶顶点数为哪项？____\nA: 8\nB: 7\nC: 6\nD: 5",
            "expected_answer": "A",
            "info": "case 9"
        },
        {
            "input": "含5个顶点、3条边的不同构的简单图有几个?____\nA: 2\nB: 3\nC: 4\nD: 5",
            "expected_answer": "C",
            "info": "case 10"
        },
        {
            "input": "下面说法错误的是____\nA: 邻接矩阵能表示自环，也能表示重边\nB: 有向图邻接矩阵的第$i$行非零元的数目恰好是$\\nu_{i}$的正度。第$j$列非零元的数目是$\\nu_{j}$的负度\nC: 关联矩阵能表示重边，不能表示自环\nD: 有向图关联矩阵第$i$行中1 的数目是$\\nu_{i}$的正度，-1 的数目是$\\nu_{i}$的负度。",
            "expected_answer": "A",
            "info": "case 11"
        },
        {
            "input": "下式不一定成立的是____\nA: $(\\forall x)(P(x)\\wedge Q(x))=(\\forall x)P(x)\\wedge(\\forall x)Q(x)$\nB: $(\\exists x)(P(x)\\lor Q(x))=(\\exists x)P(x)\\lor(\\exists x)Q(x)$\nC: $(\\forall x)(\\forall y)(P(x)\\lor{Q(x)}(y))=(\\forall x)P(x)\\lor(\\forall x)Q(x)$\nD: $(\\exists x)(P(x)\\wedge Q(x))=(\\exists x)P(x)\\wedge(\\exists x)Q(x)$",
            "expected_answer": "D",
            "info": "case 12"
        },
        {
            "input": "设A={2，3，4，6，9，12，18}，A中的整除关系R是偏序关系，那么在偏序集<A，R>中，下列说法正确的是____\nA: A的最大元素是18；\nB: A 的最小元素是2；\nC: B= {3，9}的上界只有 18；\nD: B= {4，9} 没有上下界。",
            "expected_answer": "D",
            "info": "case 13"
        },
        {
            "input": "设G为平面图，则下面可能不连通的图是____\nA: G的闭合图\nB: G*\nC: (G*)*\nD: (((G)*)*)*",
            "expected_answer": "A",
            "info": "case 14"
        },
        {
            "input": "一个无向图有五个结点，其中4个的度数是1,2,3,4,则第5个结点的度数不可能是____\nA: 0\nB: 2\nC: 4\nD: 5",
            "expected_answer": "D",
            "info": "case 15"
        }
    ],
    "formatters": [
        {
            "name": "default_format",
            "definition": "function formatter(llm_response){return llm_response}",
            "info": "do nothing"
        },
        {
            "name": "extract_ABCD",
            "definition": [
                "function formatter(llm_response) {",
                "    let pred = -1;",
                "    if (!llm_response) {",
                "        return pred;",
                "    }",
                "   const regex = /[A-D]\\./;",
                "   const match = llm_response.match(regex);  ",
                "   if (match) {  ",
                "       pred = match[0][0];  ",
                "       return pred;",
                "   }",
                "    for (let k = 0; k < 4; k++) {",
                "        const x = String.fromCharCode(65 + k); // ASCII code for 'A' + k  ",
                "        if (",
                "            llm_response.includes(x + ')') ||",
                "            llm_response.includes(x + '：') ||",
                "            llm_response[llm_response.length - 1] === x ||",
                "            (llm_response.length > 1 && llm_response[llm_response.length - 2] === x) ||  ",
                "            llm_response.includes(x + '。')  ",
                "        ) {  ",
                "            pred = x;",
                "            return pred;",
                "        }  ",
                "        if ( ",
                "            llm_response.startsWith(x + ' ') || ",
                "            llm_response.startsWith(x + '.') || ",
                "            llm_response.startsWith(x + '(')  ",
                "        ) {  ",
                "            pred = x;  ",
                "            return pred;  ",
                "        }  ",
                "    }  ",
                "    return pred;  ",
                "}"
            ],
            "info": "extract A/B/C/D if possible, else return -1"
        }
    ],
    "evaluators": [
        {
            "name": "accuracy",
            "definition": "function evaluator(formatted_response, expected_answer, args){if (formatted_response == expected_answer) return 1; else return 0;}",
            "info": "exact string match"
        },
        {
            "name": "likert_scale",
            "definition": "async function evaluator(formatted_response, expected_answer, args){return await user_input(formatted_response, expected_answer, args)}",
            "info": "human evaluation, rating from 1 to 5"
        }
    ],
    "evaluation": {
        "target_LLM": "GPT-3.5",
        "target_formatter": "extract_ABCD",
        "reference_type": "given",
        "reference_LLM": "None",
        "reference_formatter": "extract_ABCD",
        "evaluator": "accuracy",
        "summary": "None"
    }
}